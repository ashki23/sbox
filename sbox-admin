#!/usr/bin/python3
# =============================================================================
# Author: Ashkan Mirzaee
# Organization: University of Missouri RCSS 
# License: GPL-3.0
# Date: 2021/07/09
# Source: https://github.com/ashki23/sbox
# =============================================================================

import argparse
import sys
import os

parser = argparse.ArgumentParser(description = 'Small toolbox for Slurm admins', formatter_class = lambda prog: argparse.HelpFormatter(prog,max_help_position = 56))
parser.add_argument('-v', '--version', action = 'version', version = '%(prog)s 1.0')
parser.add_argument('-a', '--account', action = 'store_true', help = 'show slurm accounts')
parser.add_argument('-f', '--fairshare', action = 'store_true', help = 'show fairshare')
parser.add_argument('-g', '--group', action = 'store_true', help = 'show posix groups')
parser.add_argument('-q', '--queue', action = 'store_true', help = 'show jobs in the queue')
parser.add_argument('-j', '--job', type = int, help = 'show a running/pending job info')
parser.add_argument('--whodat', action = 'store_true', help = 'show users informations by uid')
parser.add_argument('--whodat2', action = 'store_true', help = 'show users informations by name')
parser.add_argument('--quota', action = 'store_true', help = 'show quotas')
parser.add_argument('--qos', action = 'store_true', help = 'show quality of services')
parser.add_argument('--history', choices = ['day','week','month','year'], help = 'show jobs history for last day/week/month/year', metavar = '')
parser.add_argument('--pending', action = 'store_true', help = 'show pending jobs')
parser.add_argument('--running', action = 'store_true', help = 'show running jobs')
parser.add_argument('--reserve', action = 'store_true', help = 'show reservation')
parser.add_argument('--top', action = 'store_true', help = 'show top users')
parser.add_argument('user', nargs = '?', help = 'user/job id')
args = parser.parse_args()

if len(sys.argv) == 1:
    parser.print_help(sys.stderr)
    sys.exit(1)

if args.job:
    print(' Job Info '.center(90,'-'))
    os.system(f"""
    scontrol -dd show job {args.job}
    """)

if args.reserve:
    print(' Reservations '.center(90,'-'))
    os.system("""
    scontrol show reserv
    """)

if args.top:
    print(' Top users '.center(90,'-'))
    os.system("""
    sreport user topusage
    """)

if args.whodat:
    print(' User Info '.center(90,'-'))
    os.system(f"""
    ldapsearch -x -LLL "(uid=*{args.user}*)"
    """)

if args.whodat2:
    print(' User Info '.center(90,'-'))
    os.system(f"""
    ldapsearch -x -LLL "(gecos=*{args.user}*)"
    """)

if args.queue:
    print(' Jobs in the Queue '.center(90,'-'))
    os.system(f"""
    squeue -u {args.user}
    echo \n
    """)

if args.history:
    print(f" Jobs History - Last {args.history.capitalize()} ".center(90,'-'))
    os.system(f"""
    sacct --user {args.user} --state bf,ca,cd,dl,f,nf,pr,s,to --allocations --format jobid%10,user%6,account%7,state%10,partition%9,qos%7,ncpus%5,nnodes%5,reqmem%5,submit,reserved,start,elapsed,end,nodelist%30,jobname%15 -S $(date --date='{args.history} ago' +"%Y-%m-%d")
    echo
    """)

if args.running:
    print(' Running Jobs '.center(90,'-'))
    os.system(f"""
    sacct --user {args.user} --state R --allocations --format jobid%10,user%6,account%7,state%10,partition%9,qos%7,ncpus%5,nnodes%5,reqmem%5,submit,reserved,start,elapsed,Timelimit,nodelist%30,jobname%15
    """)

if args.pending:
    print(' Pending Jobs '.center(90,'-'))
    os.system(f"""    
    squeue --user {args.user} --states PENDING --sort S --format "%10i %6u %7a %10T %9P %7q %5C %5D %5m %20V %20S %30Y %10r %j"
    """)

if args.qos:
    print(' QOS '.center(90,'-'))
    os.system(f"""
    sacctmgr show assoc format=account%15,share%7,qos%56 user={args.user}
    echo "\n The following shows information about RCSS quality of services (QOS):\n"
    sacctmgr show qos format=Name%16,MaxWall,MaxSubmit,GrpTRES%8,GrpJobs,MaxTRES,MaxTRESPU,MaxJobsPU,MaxSubmit
    echo "\n Note that blank means there is no limit."
    echo \n
    """)

if args.account:
    print(' Accounts '.center(90,'-'))
    os.system(f"""
    sacctmgr show assoc -np user={args.user} format=account | tr "|\n" " " && echo \n
    echo \n
    """)

if args.fairshare:
    print(' Fairshare '.center(90,'-'))
    os.system(f"""
    sshare -Uu {args.user}
    echo \n
    """)

if args.group:
    print(' Groups '.center(90,'-'))
    os.system(f"""
    groups {args.user}
    echo \n
    """)
 
if args.quota:    
    print(' Home Storage '.center(90,'-'))
    os.system(f"""
    df -h /home/{args.user}
    echo \n
    """)

    gpn = os.popen(f"""
    echo $(groups {args.user} | grep -Po "(?<=: ).*")
    """).read().strip()
    
    print(' HPC Storage '.center(90,'-'))
    os.system(f"""
    rcss-lfs-quota {gpn[:]}
    echo \n
    """)
