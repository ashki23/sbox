#!/usr/bin/python3
# =============================================================================
# Author: Ashkan Mirzaee
# Organization: University of Missouri RCSS 
# License: GPL-3.0
# Date: 2021/07/09
# Source: https://github.com/ashki23/sbox
# =============================================================================

import os
import sys
import argparse

parser = argparse.ArgumentParser(description = 'Starting Jupyter server on the cluster', formatter_class = lambda prog: argparse.HelpFormatter(prog,max_help_position = 56))
parser.add_argument('-A', '--account', default = 'general', help = 'account name', metavar = '')
parser.add_argument('-n', '--ntasks', type = int, default = 1, help = 'number of tasks (cpus)', metavar = '')
parser.add_argument('-p', '--partition', choices = ['Lewis','BioCompute','hpc4','hpc5','hpc6','Gpu','gpu3','gpu4'], default = 'Lewis', help = 'partition name', metavar = '')
parser.add_argument('-t', '--time', type = int, choices = [1,2,3,4,5,6,7,8], default = 2, help = 'number of hours (up to 8)', metavar = '')
parser.add_argument('-R', action = 'store_true', help = 'using R kernel')
parser.add_argument('--mem', type = int, default = 4, help = 'amount of memory (GB)', metavar = '')
parser.add_argument('--gres', default = 'gpu:0', help = 'generic resources (gpus)', metavar = '')
args = parser.parse_args()

if args.account == 'general' and args.partition in ['BioCompute','gpu3','gpu4','hpc6']:
    print('General account not allowed to use partitions BioCompute, gpu3, gpu4, and hpc6. Use another account or change the partiton.')
    sys.exit(1)

if args.partition == 'Gpu' and args.time > 2:
    print('Partition time limit. Max time for Gpu partition is 2 hours.')
    sys.exit(1)

if args.partition not in ['Gpu','gpu3','gpu4'] and args.gres != 'gpu:0':
    print('For using gpu respurces select one of gpu partitions (Gpu, gpu3, gpu4).')
    sys.exit(1)

if args.partition in ['Gpu','gpu3','gpu4'] and args.gres == 'gpu:0':
    args.gres = 'gpu:1'

if args.partition in ['Gpu','gpu3','gpu4']:
    announce = f"Logging into {args.partition} partition with {args.gres.split(':')[1]} gpu, {args.mem}G memory, {args.ntasks} cpu and using account {args.account} for {args.time} hours ..."
else:
    announce = f"Logging into {args.partition} partition with {args.mem}G memory, {args.ntasks} cpu and using account {args.account} for {args.time} hours ..."

if args.R:
    kernel = 'r'
    module = 'r-essentials'
else:
    kernel = 'py'
    module = 'anaconda'

user = os.getenv('USER')
os.system(f"install -d /home/{user}/.jupyter/job")
with open(f"/home/{user}/.jupyter/job/{kernel}-jupyter-job",'w') as jb:
    jb.write(f"""#!/bin/bash

#SBATCH --job-name jupyter-{kernel}
#SBATCH --account {args.account}
#SBATCH --partition {args.partition}
#SBATCH --ntasks {args.ntasks}
#SBATCH --mem {args.mem}G
#SBATCH --gres {args.gres}
#SBATCH --time {args.time}:00:00
#SBATCH --output /home/{user}/.jupyter/job/{kernel}-%j.out

module load {module}
jupyter-lab --no-browser --ip 0.0.0.0
    """)
    
os.system(f"""
cd /home/{user}/
rm -f /home/{user}/.jupyter/job/{kernel}-*.out
jid=$(sbatch --parsable /home/{user}/.jupyter/job/{kernel}-jupyter-job)
echo {announce}
echo "Starting Jupyter server (it might take about a couple minutes) ..."
myn=0
while ! grep -iq 'use control-c' /home/{user}/.jupyter/job/{kernel}-$jid.out > /dev/null 2>&1; do
sleep 10
if squeue -j $jid | grep -q AccountNotAllowed; then echo "{args.account} account not allowed to use {args.partition}. Use another account or change the partition"; exit; fi 
echo "Starting Jupyter server ..."
myn=`expr $myn + 1`
if [ $myn -eq 15 ]; then
echo "
It is taking more than usual to start the server.
The following shows the status of your job in the queue:
"
squeue -j $jid
echo "
You can wait more if your job is waiting for resources (Priority or Resources) or cancel the job and try again.
To Cancel your job press 'Control+C' and run 'scancel $jid'.
"
fi
done
unset jid myn i
cd - > /dev/null 2>&1
""")

jid = os.popen("ls -t /home/%s/.jupyter/job/%s-*.out 2> /dev/null | head -n 1 | grep -Po '(?<=job/%s-).*(?=.out)'" % (user,kernel,kernel)).read().strip()
port = os.popen("cat /home/%s/.jupyter/job/%s-%s.out 2> /dev/null | grep '\[.*\].http://' | grep -Po '(?<=http://).*' | grep -Po '(?<=:)\d{4}(?=/?)'" % (user,kernel,jid)).read().strip()
host = os.popen(f"cat /home/{user}/.jupyter/job/{kernel}-{jid}.out 2> /dev/null | grep '\[.*\].http://' | grep -Po '(?<=http://).*' | grep -Po '.*(?=:)'").read().strip()
url = os.popen(f"cat /home/{user}/.jupyter/job/{kernel}-{jid}.out 2> /dev/null | grep '\[.*\].*or.*http://' | grep -Po '(?<=or ).*'").read().strip()
    
if len(jid) > 0:
    print(f"""
Jupyter Notebook is running.

Open a new terminal in your local computer and run:
ssh -NL {port}:{host}:{port} {user}@lewis.rnet.missouri.edu

After that open a browser and go:
{url}

To stop the server run the following on the cluster:
scancel {jid}
    """)
