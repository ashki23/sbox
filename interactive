#!/usr/bin/python3
# =============================================================================
# Author: Ashkan Mirzaee
# Organization: University of Missouri RCSS
# License: GPL-3.0
# Date: 2021/07/09
# Source: https://github.com/ashki23/sbox
# =============================================================================

import os
import sys
import argparse

parser = argparse.ArgumentParser(description = 'An alias for using cluster interactively', formatter_class = lambda prog: argparse.HelpFormatter(prog,max_help_position = 56), epilog = 'Command should be run from the login node.')
parser.add_argument('-A', '--account', default = 'general', help = 'account name', metavar = '')
parser.add_argument('-n', '--ntasks', type = int, default = 1, help = 'number of tasks (cpus)', metavar = '')
parser.add_argument('-p', '--partition', choices = ['Interactive','Dtn','Gpu'], default = 'Interactive', help = 'partition name', metavar = '')
parser.add_argument('-t', '--time', type = int, choices = [1,2,3,4], default = 2, help = 'number of hours (up to 4)', metavar = '')
parser.add_argument('-l', '--license', help = 'license', metavar = '')
parser.add_argument('--mem', type = int, default = 2, help = 'amount of memory (GB)', metavar = '')
args = parser.parse_args()

host_name = os.popen('hostname').read().strip()
if 'login' not in host_name:
    print('Command should be run from the login node')
    sys.exit(1)

if args.partition == 'Gpu' and args.time > 2:
    print('Partition time limit. Max time for Gpu partition is 2 hours.')
    sys.exit(1)

if args.partition == 'Interactive':
    qos = 'interactive'
elif args.partition == 'Dtn':
    qos = 'dtn'
else:
    qos = 'normal'

if args.partition == 'Gpu':
    gres = 'gpu:1'
else:
    gres = 'gpu:0'

if args.partition == 'Gpu':
    announce = f"Logging into {args.partition} partition with 1 gpu, {args.mem}G memory, {args.ntasks} cpu and using account {args.account} for {args.time} hours ..."
else:
    announce = f"Logging into {args.partition} partition with {args.mem}G memory, {args.ntasks} cpu and using account {args.account} for {args.time} hours ..."

if args.license:
    print(announce)
    os.system(f"srun --partition {args.partition} --qos {qos} --gres {gres} --ntasks {args.ntasks} --mem {args.mem}G --time {args.time}:00:00 --account {args.account} --licenses {args.license}:1 --pty /bin/bash")
    
if not args.license:
    print(announce)
    os.system(f"srun --partition {args.partition} --qos {qos} --gres {gres} --ntasks {args.ntasks} --mem {args.mem}G --time {args.time}:00:00 --account {args.account} --pty /bin/bash")
